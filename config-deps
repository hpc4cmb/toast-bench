# This is a config file for the "cmbenv" scripts:
#   https://github.com/hpc4cmb/cmbenv

# OS type (linux OR osx)
OSTYPE = linux

# Specify the template to use
TEMPLATE = linux

# Python version to use
PYVERSION = auto

# Packages to install with pip
PIP_PKGS = future nose Cython numpy scipy matplotlib pyyaml astropy six psutil ephem memory_profiler healpy python-dateutil toml

# Packages to install with conda
CONDA_PKGS =

# Serial compilers
#==============================
#
# Here are the settings for the GNU toolchain:
CC = gcc
CXX = g++
FC = gfortran
#
# Here is an example for Intel compilers:
# CC = ${INTEL_PATH}/linux/bin/intel64/icc
# CXX = ${INTEL_PATH}/linux/bin/intel64/icpc
# FC = ${INTEL_PATH}/linux/bin/intel64/ifort
#
# Example for OSX with clang (fortran disabled):
# CC = clang
# CXX = clang++
# FC =
#
# Example for OSX with macports gcc:
# CC = gcc-mp-9
# CXX = g++-mp-9
# FC = gfortran-mp-9

# Compiler to use for packages needed on the build machine. On Linux these should
# generally always be the system gcc.  On OSX this is usually clang.
BUILD_CC = gcc
BUILD_CXX = g++
# BUILD_CC = clang
# BUILD_CXX = clang++

# MPI compilers
#==============================
#
# These are the settings for the case where we are building MPICH as one of the
# cmbenv packages.  To use an external MPI, fill the variables here and comment out
# the "mpich" line in config-deps.pkgs.
MPICC = mpicc
MPICXX = mpicxx
MPIFC = mpifort
MPI_CPPFLAGS = @AUX_PREFIX@/include
MPI_LDFLAGS = @AUX_PREFIX@/lib
MPI_CXXLIB = mpichcxx
MPI_LIB = mpich
MPI_EXTRA_COMP =
MPI_EXTRA_LINK =
#
# These settings are for a standard Ubuntu install of OpenMPI with debian packages:
# MPICC = mpicc
# MPICXX = mpicxx
# MPIFC = mpifort
# MPI_CPPFLAGS = /usr/include
# MPI_LDFLAGS = /usr/lib/x86_64-linux-gnu
# MPI_CXXLIB = mpi_cxx
# MPI_LIB = mpi
# MPI_EXTRA_COMP =
# MPI_EXTRA_LINK =
#
# Here are example settings for MPICH on a Cray system:
# MPICC = ${CRAYPE_DIR}/bin/cc
# MPICXX = ${CRAYPE_DIR}/bin/CC
# MPIFC = ${CRAYPE_DIR}/bin/ftn
# MPI_CPPFLAGS = ${CRAY_MPICH2_DIR}/include
# MPI_LDFLAGS = ${CRAY_MPICH2_DIR}/lib
# MPI_CXXLIB = mpichcxx
# MPI_LIB = mpich
# MPI_EXTRA_COMP =
# MPI_EXTRA_LINK = -shared

# Compile flags
#==============================
#
# Example for gcc toolchain
CFLAGS = -O3 -fPIC -pthread
CXXFLAGS = -O3 -fPIC -pthread -std=c++11
FCFLAGS = -O3 -fPIC -pthread
OPENMP_CFLAGS = -fopenmp
OPENMP_CXXFLAGS = -fopenmp
LDFLAGS = -lpthread -fopenmp
#
# Example for Intel toolchain, building "fat" binaries that have object code for both
# ivybridge and newer processors as well as KNL with AVX512.
# CFLAGS = -O3 -g -fPIC -xcore-avx2 -axmic-avx512 -pthread
# CXXFLAGS = -O3 -g -fPIC -xcore-avx2 -axmic-avx512 -pthread -std=c++11
# FCFLAGS = -O3 -g -fPIC -xcore-avx2 -axmic-avx512 -fexceptions -pthread -heap-arrays 16
# OPENMP_CFLAGS = -qopenmp
# OPENMP_CXXFLAGS = -qopenmp
# LDFLAGS = -lpthread -liomp5

# Are we doing a cross-compile?  If so, this string will be passed to packages that use
# autotools to avoid runtime checks.
CROSS =

# Parallel builds
MAKEJ = 2

# For BLAS/LAPACK, we use openblas installed via cmbenv.  If you are linking to a
# particular vendor package, put the linking options here.
BLAS = -lopenblas -fopenmp -lm
LAPACK =

# Group and permissions to set
CHGRP =
CHMOD =
